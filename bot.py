import os
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

print("=" * 50)
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
print(f"OPENAI_API_KEY: {'‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù' if OPENAI_API_KEY else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
print("=" * 50)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

if not OPENAI_API_KEY:
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –±–æ—Ç–∞ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ @"""
    
    if update.message.from_user.is_bot:
        return
    
    user_message = update.message.text
    user_name = update.message.from_user.first_name
    bot_username = (await context.bot.get_me()).username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    is_reply_to_bot = (
        update.message.reply_to_message and 
        update.message.reply_to_message.from_user and
        update.message.reply_to_message.from_user.username == bot_username
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @
    is_direct_mention = f"@{bot_username}" in user_message
    is_command = user_message.startswith('/')
    
    # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏: –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ –ò–õ–ò –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ò–õ–ò –∫–æ–º–∞–Ω–¥–∞
    should_respond = is_reply_to_bot or is_direct_mention or is_command
    
    if not should_respond:
        print(f"‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (–Ω–µ –æ—Ç–≤–µ—Ç –±–æ—Ç—É –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)")
        return
    
    print(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {user_message}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    clean_message = user_message.replace(f"@{bot_username}", "").strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–∫—Ä–æ–º–µ /start), —É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if clean_message.startswith('/') and not clean_message.startswith('/start'):
        clean_message = ' '.join(clean_message.split(' ')[1:])
    
    await update.message.chat.send_action(action="typing")
    
    try:
    response = client.chat.completions.create(
        model="gpt-3.5-turbo-0125",  # –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –≤–µ—Ä—Å–∏—è GPT-3.5
        messages=[
            {
                "role": "system", 
                "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-–≥—Ä—É–ø–ø–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –¢–µ–∫—É—â–∏–π –≥–æ–¥: 2024."
            },
            {
                "role": "user", 
                "content": clean_message
            }
        ],
        max_tokens=500
    )
        
        ai_response = response.choices[0].message.content
        
        # –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º reply –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(ai_response, reply_to_message_id=update.message.message_id)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (reply)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_to_message_id=update.message.message_id)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    bot_username = (await context.bot.get_me()).username
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
        "*–°–ø–æ—Å–æ–±—ã –æ–±—Ä–∞—â–µ–Ω–∏—è:*\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ –ª—é–±–æ–µ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{} –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /ask [–≤–æ–ø—Ä–æ—Å]\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "`@{} –ö–∞–∫ –¥–µ–ª–∞?`\n"
        "`/ask –ù–∞–ø–∏—à–∏ –∫–æ–¥`\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    ).format(bot_username, bot_username)
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

async def post_stop(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
        application = (
            Application.builder()
            .token(TELEGRAM_BOT_TOKEN)
            .post_init(post_init)
            .post_stop(post_stop)
            .build()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ 24/7")
        print("üì± –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()
